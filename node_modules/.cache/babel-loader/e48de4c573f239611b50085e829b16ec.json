{"ast":null,"code":"import _slicedToArray from\"/Users/macos10.12/Documents/GitHub/SoftwareDesignGroup23/fuel-quote-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";var md5=require(\"md5\");module.exports={/**\n   *\n   *\n   * @param { string } rawPass - the password to be hashed\n   * @param { object } [options={}] - object containing salt and rounds\n   * @returns {string} \n   */hash:function hash(rawPassword){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};/**\n     * salt is optional, if not provided it will be set to current timestamp\n     */var salt=options.salt?options.salt:new Date().getTime();/**\n     * rounds is optional, if not provided it will be set to 10\n     */var rounds=options.rounds?options.rounds:10;var hashed=md5(rawPassword+salt);for(var i=0;i<=rounds;i++){hashed=md5(hashed);}return\"\".concat(salt,\"$\").concat(rounds,\"$\").concat(hashed);},/**\n   *\n   *\n   * @param {string} rawPassword - the raw password\n   * @param { string } hashedPassword - the hashed password\n   * @returns\n   */compare:function compare(rawPassword,hashedPassword){try{var _hashedPassword$split=hashedPassword.split('$'),_hashedPassword$split2=_slicedToArray(_hashedPassword$split,2),salt=_hashedPassword$split2[0],rounds=_hashedPassword$split2[1];var hashedRawPassword=this.hash(rawPassword,{salt:salt,rounds:rounds});return hashedPassword===hashedRawPassword;}catch(error){throw Error(error.message);}}};","map":{"version":3,"sources":["/Users/macos10.12/Documents/GitHub/SoftwareDesignGroup23/fuel-quote-app/src/components/custom-bcrypt.js"],"names":["md5","require","module","exports","hash","rawPassword","options","salt","Date","getTime","rounds","hashed","i","compare","hashedPassword","split","hashedRawPassword","error","Error","message"],"mappings":"8LAAA,GAAMA,CAAAA,GAAG,CAAGC,OAAO,CAAC,KAAD,CAAnB,CAEAC,MAAM,CAACC,OAAP,CAAiB,CACf;AACF;AACA;AACA;AACA;AACA;AACA,KACEC,IARe,eAQVC,WARU,CAQiB,IAAdC,CAAAA,OAAc,2DAAJ,EAAI,CAC9B;AACJ;AACA,OACI,GAAMC,CAAAA,IAAI,CAAGD,OAAO,CAACC,IAAR,CAAeD,OAAO,CAACC,IAAvB,CAA8B,GAAIC,CAAAA,IAAJ,GAAWC,OAAX,EAA3C,CAEA;AACJ;AACA,OACI,GAAMC,CAAAA,MAAM,CAAGJ,OAAO,CAACI,MAAR,CAAiBJ,OAAO,CAACI,MAAzB,CAAkC,EAAjD,CAEA,GAAIC,CAAAA,MAAM,CAAGX,GAAG,CAACK,WAAW,CAAGE,IAAf,CAAhB,CACA,IAAK,GAAIK,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,EAAIF,MAArB,CAA6BE,CAAC,EAA9B,CAAkC,CAChCD,MAAM,CAAGX,GAAG,CAACW,MAAD,CAAZ,CACD,CACD,gBAAUJ,IAAV,aAAkBG,MAAlB,aAA4BC,MAA5B,EACD,CAxBc,CAyBf;AACF;AACA;AACA;AACA;AACA;AACA,KACEE,OAhCe,kBAgCPR,WAhCO,CAgCMS,cAhCN,CAgCsB,CACnC,GAAI,2BACuBA,cAAc,CAACC,KAAf,CAAqB,GAArB,CADvB,gEACMR,IADN,2BACYG,MADZ,2BAEF,GAAMM,CAAAA,iBAAiB,CAAG,KAAKZ,IAAL,CAAUC,WAAV,CAAuB,CAAEE,IAAI,CAAJA,IAAF,CAAQG,MAAM,CAANA,MAAR,CAAvB,CAA1B,CACA,MAAOI,CAAAA,cAAc,GAAKE,iBAA1B,CACD,CAAC,MAAOC,KAAP,CAAc,CACd,KAAMC,CAAAA,KAAK,CAACD,KAAK,CAACE,OAAP,CAAX,CACD,CACF,CAxCc,CAAjB","sourcesContent":["const md5 = require(\"md5\");\n\nmodule.exports = {\n  /**\n   *\n   *\n   * @param { string } rawPass - the password to be hashed\n   * @param { object } [options={}] - object containing salt and rounds\n   * @returns {string} \n   */\n  hash(rawPassword, options = {}) {\n    /**\n     * salt is optional, if not provided it will be set to current timestamp\n     */\n    const salt = options.salt ? options.salt : new Date().getTime();\n\n    /**\n     * rounds is optional, if not provided it will be set to 10\n     */\n    const rounds = options.rounds ? options.rounds : 10;\n\n    let hashed = md5(rawPassword + salt);\n    for (let i = 0; i <= rounds; i++) {\n      hashed = md5(hashed);\n    }\n    return `${salt}$${rounds}$${hashed}`;\n  },\n  /**\n   *\n   *\n   * @param {string} rawPassword - the raw password\n   * @param { string } hashedPassword - the hashed password\n   * @returns\n   */\n  compare(rawPassword, hashedPassword) {\n    try {\n      const [ salt, rounds ] = hashedPassword.split('$');\n      const hashedRawPassword = this.hash(rawPassword, { salt, rounds });\n      return hashedPassword === hashedRawPassword;\n    } catch (error) {\n      throw Error(error.message);\n    }\n  }\n};"]},"metadata":{},"sourceType":"module"}