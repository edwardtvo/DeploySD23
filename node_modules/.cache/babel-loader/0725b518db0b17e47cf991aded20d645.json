{"ast":null,"code":"const md5 = require(\"md5\");\n\nmodule.exports = {\n  /**\n   *\n   *\n   * @param { string } rawPass - the password to be hashed\n   * @param { object } [options={}] - object containing salt and rounds\n   * @returns {string} \n   */\n  hash(rawPassword, options = {}) {\n    /**\n     * salt is optional, if not provided it will be set to current timestamp\n     */\n    const salt = options.salt ? options.salt : new Date().getTime();\n    /**\n     * rounds is optional, if not provided it will be set to 10\n     */\n\n    const rounds = options.rounds ? options.rounds : 10;\n    let hashed = md5(rawPassword + salt);\n\n    for (let i = 0; i <= rounds; i++) {\n      hashed = md5(hashed);\n    }\n\n    return `${salt}$${rounds}$${hashed}`;\n  },\n\n  /**\n   *\n   *\n   * @param {string} rawPassword - the raw password\n   * @param { string } hashedPassword - the hashed password\n   * @returns\n   */\n  compare(rawPassword, hashedPassword) {\n    try {\n      const [salt, rounds] = hashedPassword.split('$');\n      const hashedRawPassword = this.hash(rawPassword, {\n        salt,\n        rounds\n      });\n      return hashedPassword === hashedRawPassword;\n    } catch (error) {\n      throw Error(error.message);\n    }\n  }\n\n};","map":{"version":3,"sources":["/Users/macos10.12/Documents/GitHub/DeploySD23/src/components/custom-bcrypt.js"],"names":["md5","require","module","exports","hash","rawPassword","options","salt","Date","getTime","rounds","hashed","i","compare","hashedPassword","split","hashedRawPassword","error","Error","message"],"mappings":"AAAA,MAAMA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAnB;;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACf;AACF;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,IAAI,CAACC,WAAD,EAAcC,OAAO,GAAG,EAAxB,EAA4B;AAC9B;AACJ;AACA;AACI,UAAMC,IAAI,GAAGD,OAAO,CAACC,IAAR,GAAeD,OAAO,CAACC,IAAvB,GAA8B,IAAIC,IAAJ,GAAWC,OAAX,EAA3C;AAEA;AACJ;AACA;;AACI,UAAMC,MAAM,GAAGJ,OAAO,CAACI,MAAR,GAAiBJ,OAAO,CAACI,MAAzB,GAAkC,EAAjD;AAEA,QAAIC,MAAM,GAAGX,GAAG,CAACK,WAAW,GAAGE,IAAf,CAAhB;;AACA,SAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIF,MAArB,EAA6BE,CAAC,EAA9B,EAAkC;AAChCD,MAAAA,MAAM,GAAGX,GAAG,CAACW,MAAD,CAAZ;AACD;;AACD,WAAQ,GAAEJ,IAAK,IAAGG,MAAO,IAAGC,MAAO,EAAnC;AACD,GAxBc;;AAyBf;AACF;AACA;AACA;AACA;AACA;AACA;AACEE,EAAAA,OAAO,CAACR,WAAD,EAAcS,cAAd,EAA8B;AACnC,QAAI;AACF,YAAM,CAAEP,IAAF,EAAQG,MAAR,IAAmBI,cAAc,CAACC,KAAf,CAAqB,GAArB,CAAzB;AACA,YAAMC,iBAAiB,GAAG,KAAKZ,IAAL,CAAUC,WAAV,EAAuB;AAAEE,QAAAA,IAAF;AAAQG,QAAAA;AAAR,OAAvB,CAA1B;AACA,aAAOI,cAAc,KAAKE,iBAA1B;AACD,KAJD,CAIE,OAAOC,KAAP,EAAc;AACd,YAAMC,KAAK,CAACD,KAAK,CAACE,OAAP,CAAX;AACD;AACF;;AAxCc,CAAjB","sourcesContent":["const md5 = require(\"md5\");\n\nmodule.exports = {\n  /**\n   *\n   *\n   * @param { string } rawPass - the password to be hashed\n   * @param { object } [options={}] - object containing salt and rounds\n   * @returns {string} \n   */\n  hash(rawPassword, options = {}) {\n    /**\n     * salt is optional, if not provided it will be set to current timestamp\n     */\n    const salt = options.salt ? options.salt : new Date().getTime();\n\n    /**\n     * rounds is optional, if not provided it will be set to 10\n     */\n    const rounds = options.rounds ? options.rounds : 10;\n\n    let hashed = md5(rawPassword + salt);\n    for (let i = 0; i <= rounds; i++) {\n      hashed = md5(hashed);\n    }\n    return `${salt}$${rounds}$${hashed}`;\n  },\n  /**\n   *\n   *\n   * @param {string} rawPassword - the raw password\n   * @param { string } hashedPassword - the hashed password\n   * @returns\n   */\n  compare(rawPassword, hashedPassword) {\n    try {\n      const [ salt, rounds ] = hashedPassword.split('$');\n      const hashedRawPassword = this.hash(rawPassword, { salt, rounds });\n      return hashedPassword === hashedRawPassword;\n    } catch (error) {\n      throw Error(error.message);\n    }\n  }\n};"]},"metadata":{},"sourceType":"module"}